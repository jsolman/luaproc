{"name":"Luaproc (with parent thread msg support)","tagline":"Concurrent programming library for Lua","body":"Originally Copyright 2008 Alexandre Skyrme, Noemi Rodriguez, Roberto Ierusalimschy\r\nSee COPYRIGHT file\r\n\r\nModified by Jeff Solinsky in 2012 to add support for sending messages and creating channels from the parent thread.\r\n\r\n<pre>\r\n***********************************************************\r\n* API Functions                                           *\r\n***********************************************************\r\n<> = mandatory arguments\r\n[] = optional arguments\r\n\r\n-- Create a new lua process\r\n-- Returns true if sucessful or nil, error_message if failed\r\nluaproc.newproc( <string lua_code> )\r\n\r\n-- Create a new worker (pthread) \r\n-- Returns true if sucessful or nil, error_message if failed\r\nluaproc.createworker( <void> )\r\n\r\n-- Destroy a worker (pthread) \r\n-- Returns true if sucessful or nil, error_message if failed\r\nluaproc.destroyworker( <void> )\r\n\r\n-- Send a message on a channel\r\n-- Returns true if sucessful or nil, error_message if failed\r\n-- Results in blocking if there is no matching receive\r\nluaproc.send( <string channel_name>, <string msg1>,\r\n              [string msg2], [string msg3], ... )\r\n\r\n-- Receive a message on a channel\r\n-- Returns message string(s) if sucessful or nil, error_message if failed\r\n-- Results in blocking if there is no matching send\r\n-- and the asynchronous flag is not set (nil) or set to false\r\nluaproc.receive( <string channel_name>, [boolean asynchronous] )\r\n\r\n-- Create a new channel\r\n-- Returns true if sucessful or nil, error_message if failed\r\nluaproc.newchannel( <string channel_name> )\r\n\r\n-- Destroy a channel\r\n-- Returns true if sucessful or nil, error_message if failed\r\nluaproc.delchannel( <string channel_name> )\r\n\r\n-- Set maximum lua processes that should be recycled (default = 0)\r\n-- Returns true if sucessful or nil, error_message if failed\r\nluaproc.recycle( <int maxrecycle> )\r\n\r\n***********************************************************\r\n* Following two functions only available to parent thread *\r\n* that originally called require(\"luaproc\")               *\r\n***********************************************************\r\n-- Add a co-routine as a luaproc process\r\n-- Any coroutine that will call luaproc functions\r\n-- send, receive, newchannel, or delchannel must call this\r\n-- first.  \r\nluaproc.addproc( <void> )\r\n\r\n-- Synchronize workers (pthreads) and exit after all lua processes have ended\r\n-- No return, finishes execution.\r\nluaproc.exit( <void> )\r\n\r\n</pre>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}